[{"content":"The Goals This work establishes how the resources allocated for the LIF FPEA program on the FPGA changes when executing 2, 5, 10, 100 or 1000 neurons in an ensemble.\nBetween this version of the LIF neuron FPEA program and the last changes were made to improve the overall program efficiency by reordering instructions in the assembly program as well as using the output from slice P on the DSP slice as an operand to instructions allowing the data to be used two cycles earlier in subsequent instructions than if the data was written to memory.\nGit Commit 61451d9872f83a337e81aa7edc25e91d631f1e02\nFPEA Program Analysis    Instruction Used Percentage (%) Cycles Used Cycles Used (%)     Total Number of Instructions 42  141    ALU Instructions 15 35.714 75 53.191   NOP 14 33.333 14 9.929   Jumps 5 11.905 20 14.184   BAM Management 8 19.048 32 22.695      A bar plot comparing the number of cycles used (as a percentage) of the previous and current LIF FPEA programs for each category of instruction \nAs can be seen in the plot above the percentage of cycles used for NOP instructions has been reduced through the reordering of instructions and use of slice P as an operand to instructions. We can also see however that 22% of the cycles ar used for BAM management, though it should be noted not all of these BAM management instructions will be executed and the ones that will depend on the path taken through the program.\n  A bar plot comparing the number of instructions used (as a percentage) of the previous and current LIF FPEA programs for each category of instruction \n  A bar plot showing the total number of cycles needed to execute the the LIF FPEA program for each version \n  A bar plot showing the total number of instructions used to execute the the LIF FPEA program for each version \n2 Neuron Ensemble Resource Utilization Slice Logic    Site Type Used Fixed Available Util (%)     Slice LUTs 152 0 53200 0.29   LUT as Logic 135 0 53200 0.25   LUT as Memory 17 0 17400 0.10   LUT as Distributed RAM 12 0     LUT as Shift Register 5 0     Slice Registers 230 0 106400 0.22   Register as Flip Flop 230 0 106400 0.22   Register as Latch 0 0 106400 0.00   F7 Muxes 1 0 26600 \u0026lt;0.01   F8 Muxes 0 0 13300 0.00    Memory    Site Type Used Fixed Available Util (%)     Block RAM Tile 0 0 140 0.00   RAMB36/FIFO* 0 0 140 0.00   RAMB18 0 0 280 0.00    DSP    Site Type Used Fixed Available Util (%)     DSPs 1 0 220 0.45   DSP48E1 only 1       5 Neuron Ensemble Resource Utilization Resource Utilization Slice Logic    Site Type Used Fixed Available Util (%)     Slice LUTs 158 0 53200 0.30   LUT as Logic 141 0 53200 0.27   LUT as Memory 17 0 17400 0.10   LUT as Distributed RAM 12 0     LUT as Shift Register 5 0     Slice Registers 236 0 106400 0.22   Register as Flip Flop 236 0 106400 0.22   Register as Latch 0 0 106400 0.00   F7 Muxes 1 0 26600 \u0026lt;0.01   F8 Muxes 0 0 13300 0.00    Memory    Site Type Used Fixed Available Util (%)     Block RAM Tile 0 0 140 0.00   RAMB36/FIFO* 0 0 140 0.00   RAMB18 0 0 280 0.00    DSP    Site Type Used Fixed Available Util (%)     DSPs 1 0 220 0.45   DSP48E1 only 1       10 Neuron Ensemble Resource Utilization Slice Logic    Site Type Used Fixed Available Util (%)     Slice LUTs 162 0 53200 0.30   LUT as Logic 145 0 53200 0.27   LUT as Memory 17 0 17400 0.10   LUT as Distributed RAM 12 0     LUT as Shift Register 5 0     Slice Registers 242 0 106400 0.23   Register as Flip Flop 242 0 106400 0.23   Register as Latch 0 0 106400 0.00   F7 Muxes 0 0 26600 0.00   F8 Muxes 0 0 13300 0.00    Memory    Site Type Used Fixed Available Util (%)     Block RAM Tile 0 0 140 0.00   RAMB36/FIFO* 0 0 140 0.00   RAMB18 0 0 280 0.00    DSP    Site Type Used Fixed Available Util (%)     DSPs 1 0 220 0.45   DSP48E1 only 1       100 Neuron Ensemble Resource Utilization Slice Logic    Site Type Used Fixed Available Util (%)     Slice LUTs 191 0 53200 0.36   LUT as Logic 183 0 53200 0.34   LUT as Memory 8 0 17400 0.05   LUT as Distributed RAM 0 0     LUT as Shift Register 8 0     Slice Registers 250 0 106400 0.23   Register as Flip Flop 250 0 106400 0.23   Register as Latch 0 0 106400 0.00   F7 Muxes 6 0 26600 0.02   F8 Muxes 0 0 13300 0.00    Memory    Site Type Used Fixed Available Util (%)     Block RAM Tile 0.5 0 140 0.36   RAMB36/FIFO* 0 0 140 0.00   RAMB18 1 0 280 0.36   RAMB18E1 only 1       DSP    Site Type Used Fixed Available Util (%)     DSPs 1 0 220 0.45   DSP48E1 only 1       1000 Neuron Ensemble Resource Utilization Slice Logic    Site Type Used Fixed Available Util (%)     Slice LUTs 225 0 53200 0.42   LUT as Logic 189 0 53200 0.36   LUT as Memory 36 0 17400 0.21   LUT as Distributed RAM 0 0     LUT as Shift Register 36 0     Slice Registers 253 0 106400 0.24   Register as Flip Flop 253 0 106400 0.24   Register as Latch 0 0 106400 0.00   F7 Muxes 0 0 26600 0.00   F8 Muxes 0 0 13300 0.00    Memory    Site Type Used Fixed Available Util (%)     Block RAM Tile 2.5 0 140 1.79   RAMB36/FIFO* 2 0 140 1.43   RAMB36E1 only 2      RAMB18 1 0 280 0.36   RAMB18E1 only 1       DSP    Site Type Used Fixed Available Util (%)     DSPs 1 0 220 0.45   DSP48E1 only 1       FPGA Resource Utilization   The line graph shows how the percentage of available slice resources on the FPGA changes as the number of neurons in the ensemble increases. \nFuture Work Almost 40% of the cycles used to execute an ensemble of LIF neurons are used for jump instructions and BAM management. This number could potentially be reduced by interleaving the execution of other neurons in the same ensemble. Additionally, instead of storing all the data of a particular neuron in one block in memory we could interleave the data of multiple neurons which may remove some or all of the BAM management instructions from the program.\n","date":"2020-12-16T00:00:00Z","permalink":"https://estreams.gitlab.io/sfpe/p/ensemble-lif-analysis/","title":"Ensemble LIF Analysis"},{"content":"The Goal This work establishes how the resources allocated for the ReLU FPEA program on the FPGA changes when executing 2, 5, 10, 100 or 1000 neurons in an ensemble.\nBetween this version of the ReLU neuron FPEA program and the last changes were made to improve the overall program efficiency by reordering instructions in the assembly program as well as using the output from slice P on the DSP slice as an operand to instructions allowing the data to be used two cycles earlier in subsequent instructions than if the data was written to memory.\nGit Commit 4f6f77648e77e952353c66531ef82019270aeab2\nFPEA Program Analysis    Instruction Used Percentage (%) Cycles Used Cycles Used (%)     Total Number of Instructions 30  79    ALU Instructions 10 33.333 50 63.291   NOP 17 56.667 17 21.519   Jumps 2 6.667 8 10.127   BAM Management 1 3.333 4 5.063      A bar plot comparing the number of cycles used (as a percentage) of the previous and current ReLU FPEA programs for each category of instruction \n  A bar plot comparing the number of instructions used (as a percentage) of the previous and current ReLU FPEA programs for each category of instruction \n  A bar plot showing the total number of cycles needed to execute the the ReLU FPEA program for each version \n  A bar plot showing the total number of instructions used to execute the the ReLU FPEA program for each version \nBy using the output from slice P of the DSP slice as an operand in instructions a small number of NOP instructions could be removed from the program however the combination of NOPs and jump instructions in the program still prevent the program efficiency from reaching 90%.\n2 Neuron Ensemble Resource Utilization Slice Logic    Site Type Used Fixed Available Util (%)     Slice LUTs 80 0 53200 0.15   LUT as Logic 76 0 53200 0.14   LUT as Memory 4 0 17400 0.02   LUT as Distributed RAM 0 0     LUT as Shift Register 4 0     Slice Registers 177 0 106400 0.17   Register as Flip Flop 177 0 106400 0.17   Register as Latch 0 0 106400 0.00   F7 Muxes 0 0 26600 0.00   F8 Muxes 0 0 13300 0.00    Memory    Site Type Used Fixed Available Util (%)     Block RAM Tile 0 0 140 0.00   RAMB36/FIFO* 0 0 140 0.00   RAMB18 0 0 280 0.00    DSP    Site Type Used Fixed Available Util (%)     DSPs 1 0 220 0.45   DSP48E1 only 1       5 Neuron Ensemble Resource Utilization Resource Utilization Slice Logic    Site Type Used Fixed Available Util (%)     Slice LUTs 83 0 53200 0.16   LUT as Logic 78 0 53200 0.15   LUT as Memory 5 0 17400 0.03   LUT as Distributed RAM 0 0     LUT as Shift Register 5 0     Slice Registers 179 0 106400 0.17   Register as Flip Flop 179 0 106400 0.17   Register as Latch 0 0 106400 0.00   F7 Muxes 0 0 26600 0.00   F8 Muxes 0 0 13300 0.00    Memory    Site Type Used Fixed Available Util (%)     Block RAM Tile 0 0 140 0.00   RAMB36/FIFO* 0 0 140 0.00   RAMB18 0 0 280 0.00    DSP    Site Type Used Fixed Available Util (%)     DSPs 1 0 220 0.45   DSP48E1 only 1       10 Neuron Ensemble Resource Utilization Slice Logic    Site Type Used Fixed Available Util (%)     Slice LUTs 85 0 53200 0.16   LUT as Logic 79 0 53200 0.15   LUT as Memory 6 0 17400 0.03   LUT as Distributed RAM 0 0     LUT as Shift Register 6 0     Slice Registers 181 0 106400 0.17   Register as Flip Flop 181 0 106400 0.17   Register as Latch 0 0 106400 0.00   F7 Muxes 0 0 26600 0.00   F8 Muxes 0 0 13300 0.00    Memory    Site Type Used Fixed Available Util (%)     Block RAM Tile 0 0 140 0.00   RAMB36/FIFO* 0 0 140 0.00   RAMB18 0 0 280 0.00    DSP    Site Type Used Fixed Available Util (%)     DSPs 1 0 220 0.45   DSP48E1 only 1       100 Neuron Ensemble Resource Utilization Slice Logic    Site Type Used Fixed Available Util (%)     Slice LUTs 99 0 53200 0.19   LUT as Logic 93 0 53200 0.17   LUT as Memory 6 0 17400 0.03   LUT as Distributed RAM 0 0     LUT as Shift Register 6 0     Slice Registers 189 0 106400 0.18   Register as Flip Flop 189 0 106400 0.18   Register as Latch 0 0 106400 0.00   F7 Muxes 6 0 26600 0.02   F8 Muxes 0 0 13300 0.00    Memory    Site Type Used Fixed Available Util (%)     Block RAM Tile 0 0 140 0.00   RAMB36/FIFO* 0 0 140 0.00   RAMB18 0 0 280 0.00    DSP    Site Type Used Fixed Available Util (%)     DSPs 1 0 220 0.45   DSP48E1 only 1       1000 Neuron Ensemble Resource Utilization Slice Logic    Site Type Used Fixed Available Util (%)     Slice LUTs 114 0 53200 0.21   LUT as Logic 79 0 53200 0.15   LUT as Memory 35 0 17400 0.20   LUT as Distributed RAM 0 0     LUT as Shift Register 35 0     Slice Registers 181 0 106400 0.17   Register as Flip Flop 181 0 106400 0.17   Register as Latch 0 0 106400 0.00   F7 Muxes 0 0 26600 0.00   F8 Muxes 0 0 13300 0.00    Memory    Site Type Used Fixed Available Util (%)     Block RAM Tile 0.5 0 140 0.36   RAMB36/FIFO* 0 0 140 0.00   RAMB18 1 0 280 0.36   RAMB18E1 only 1       DSP    Site Type Used Fixed Available Util (%)     DSPs 1 0 220 0.45   DSP48E1 only 1       FPGA Resource Utilization   The line graph shows how the percentage of available slice resources on the FPGA changes as the number of neurons in the ensemble increases. \nFuture Work Another way to further improve program efficiency would be to interleave the operations of other ReLU into the loop thus replacing NOP instructions with ALU instructions using data of other neurons in the ensemble. At this point it is not clear what this would impact in terms of resource usage or in the addition of BAM management instructions (which would reduce the program efficiency).\n","date":"2020-12-16T00:00:00Z","permalink":"https://estreams.gitlab.io/sfpe/p/ensemble-relu-analysis/","title":"Ensemble ReLU Analysis"},{"content":"The Goal Between this version of the SReLU neuron FPEA program and the last changes were made to improve the overall program efficiency by reordering instructions in the assembly program as well as using the output from slice P on the DSP slice as an operand to instructions allowing the data to be used two cycles earlier in subsequent instructions than if the data was written to memory.\nThis work also establishes how resource cost grows when executing ensembles of SReLU neurons. The results of this can be found below in tables and plots.\nGit Commit f73740affa5b6f43ff1b973b36a4657130fe7855\nFPEA Program Analysis    Instruction Used Percentage (%) Cycles Used Cycles Used (%)     Total Number of Instructions 36  116    ALU Instructions 17 47.222 85 73.276   NOP 15 41.667 15 12.931   Jumps 2 5.556 8 6.867   BAM Management 2 5.556 8 6.897    A new row has been added to the FPEA program analysis table for the \u0026ldquo;BAM management\u0026rdquo; instructions. These instructions include the RESET and SEEK instructions used to change the memory location referenced by the BAM address pointer.\n  A bar plot comparing the number of cycles used (as a percentage) of the previous and current SReLU FPEA programs for each category of instruction \nThis figure shows how the reordering of instructions and use of the P register as an operand has increased the percentage of cycles used by ALU instructions while reducing the percentage of NOP instructions. From this we can see that the program efficiency is almost at 90%.\n  A bar plot comparing the number of instructions used (as a percentage) of the previous and current SReLU FPEA programs for each category of instruction \nThere is a reduction in the proportion of NOP instructions needed to stall the pipeline.\n  A bar plot showing the total number of cycles needed to execute the the SReLU FPEA program for each version \nThe new SReLU FPEA program uses more cycles than the old program because although there are less NOP instructions more ALU instructions were added to the program.\n  A bar plot showing the total number of instructions used to execute the the SReLU FPEA program for each version \nFPGA Resource Utilization   The line graph shows how the percentage of available slice resources on the FPGA changes as the number of neurons in the ensemble increases. \nRaw Data Future Work The program efficiency has not reached 90% but it may be improved by interleaving the operations of different neurons into each iteration of the loop. However this may require adding more BAM resources or BAM management instructions, the latter would decrease program efficiency with BAM management overhead.\n","date":"2020-12-13T00:00:00Z","permalink":"https://estreams.gitlab.io/sfpe/p/ensemble-srelu-analysis/","title":"Ensemble SReLU Analysis"}]