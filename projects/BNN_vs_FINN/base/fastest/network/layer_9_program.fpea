{
	DEF input_r  8 ;
	DEF input_c  8 ;
	DEF input_d  256 ;
	
	// Define meaningfully names for Block access managers
	DEF results_read  0 ;
	DEF results_write 1 ;
	
	RESET BAM[results_write];
	RESET BAM[results_read];
	NOP;
	
	// Handle each row of kernals
	ZOL (input_r / 2)
	{
		// Handle upper elements of each kernals in row
		ZOL (input_c / 2)
		{
			// Handle first upper elements
			ZOL (input_d)
			{
				MOV (GET[0]<ADV>, RAM[BAM[results_write]<FORWARD>]);
			}
			
			// Push write back for second upper elements
			SEEK BAM[results_write](input_d)<BACKWARD>;
			NOP;
			NOP;
			
			// Handle second upper elements
			ZOL (input_d)
			{
				OR (GET[0]<ADV>, RAM[BAM[results_read]<FORWARD>], RAM[BAM[results_write]<FORWARD>]);
			}
			NOP;
		}
		NOP;
		
		// Handle lower elements of each kernals in row
		ZOL (input_c / 2)
		{
			// Handle first lower elements
			ZOL (input_d)
			{
				OR (GET[0]<ADV>, RAM[BAM[results_read]<FORWARD>], RAM[BAM[results_write]<FORWARD>]);
			}
			
			// Push write back for second lower elements
			SEEK BAM[results_read](input_d)<BACKWARD>;
			NOP;
			NOP;
			
			// Handle second lower elements
			ZOL (input_d)
			{
				OR (GET[0]<ADV>, RAM[BAM[results_read]<FORWARD>], PUT[0]);
			}
			NOP;
		}
		NOP;
	}
	NOP;
}
