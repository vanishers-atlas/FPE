# Generated from FPE_assembly.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\66")
        buf.write("\u014e\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3")
        buf.write("\6\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3")
        buf.write("\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20")
        buf.write("\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\23")
        buf.write("\3\23\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\31\3\31\3\31")
        buf.write("\3\31\3\32\3\32\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34")
        buf.write("\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3!\3!\3!\3!\3\"\3\"\3")
        buf.write("\"\3\"\3#\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3%\3&\3&\3&\3")
        buf.write("&\3\'\3\'\3\'\3\'\3(\3(\3(\3)\3)\3)\3)\3*\3*\3*\3*\3+")
        buf.write("\3+\3+\3+\3,\3,\3-\3-\3.\6.\u0108\n.\r.\16.\u0109\3/\3")
        buf.write("/\3/\6/\u010f\n/\r/\16/\u0110\3\60\3\60\3\60\6\60\u0116")
        buf.write("\n\60\r\60\16\60\u0117\3\61\3\61\3\61\6\61\u011d\n\61")
        buf.write("\r\61\16\61\u011e\3\62\3\62\7\62\u0123\n\62\f\62\16\62")
        buf.write("\u0126\13\62\3\63\3\63\3\63\3\63\3\63\7\63\u012d\n\63")
        buf.write("\f\63\16\63\u0130\13\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\64\3\64\3\64\3\64\7\64\u013c\n\64\f\64\16\64\u013f")
        buf.write("\13\64\3\64\6\64\u0142\n\64\r\64\16\64\u0143\3\64\3\64")
        buf.write("\3\65\6\65\u0149\n\65\r\65\16\65\u014a\3\65\3\65\4\u012e")
        buf.write("\u013d\2\66\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25")
        buf.write("\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+")
        buf.write("\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E")
        buf.write("$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66\3")
        buf.write("\2\r\3\2\62;\4\2DDdd\3\2\62\63\4\2QQqq\3\2\629\4\2ZZz")
        buf.write("z\5\2\62;CHch\5\2C\\aac|\6\2\62;C\\aac|\4\2\f\f\17\17")
        buf.write("\5\2\13\f\17\17\"\"\2\u0156\2\3\3\2\2\2\2\5\3\2\2\2\2")
        buf.write("\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3")
        buf.write("\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2")
        buf.write("\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2")
        buf.write("\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2")
        buf.write("\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63")
        buf.write("\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2")
        buf.write("\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2")
        buf.write("\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3")
        buf.write("\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y")
        buf.write("\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2")
        buf.write("c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\3k\3\2\2\2")
        buf.write("\5m\3\2\2\2\7o\3\2\2\2\tq\3\2\2\2\13s\3\2\2\2\ru\3\2\2")
        buf.write("\2\17w\3\2\2\2\21y\3\2\2\2\23}\3\2\2\2\25\177\3\2\2\2")
        buf.write("\27\u0081\3\2\2\2\31\u0083\3\2\2\2\33\u0085\3\2\2\2\35")
        buf.write("\u0087\3\2\2\2\37\u008b\3\2\2\2!\u008f\3\2\2\2#\u0093")
        buf.write("\3\2\2\2%\u0095\3\2\2\2\'\u0099\3\2\2\2)\u009d\3\2\2\2")
        buf.write("+\u00a1\3\2\2\2-\u00a9\3\2\2\2/\u00b2\3\2\2\2\61\u00b6")
        buf.write("\3\2\2\2\63\u00ba\3\2\2\2\65\u00bc\3\2\2\2\67\u00c0\3")
        buf.write("\2\2\29\u00c4\3\2\2\2;\u00c8\3\2\2\2=\u00ce\3\2\2\2?\u00d3")
        buf.write("\3\2\2\2A\u00d7\3\2\2\2C\u00db\3\2\2\2E\u00df\3\2\2\2")
        buf.write("G\u00e3\3\2\2\2I\u00e7\3\2\2\2K\u00eb\3\2\2\2M\u00ef\3")
        buf.write("\2\2\2O\u00f3\3\2\2\2Q\u00f6\3\2\2\2S\u00fa\3\2\2\2U\u00fe")
        buf.write("\3\2\2\2W\u0102\3\2\2\2Y\u0104\3\2\2\2[\u0107\3\2\2\2")
        buf.write("]\u010b\3\2\2\2_\u0112\3\2\2\2a\u0119\3\2\2\2c\u0120\3")
        buf.write("\2\2\2e\u0127\3\2\2\2g\u0137\3\2\2\2i\u0148\3\2\2\2kl")
        buf.write("\7,\2\2l\4\3\2\2\2mn\7\61\2\2n\6\3\2\2\2op\7\'\2\2p\b")
        buf.write("\3\2\2\2qr\7-\2\2r\n\3\2\2\2st\7/\2\2t\f\3\2\2\2uv\7}")
        buf.write("\2\2v\16\3\2\2\2wx\7\177\2\2x\20\3\2\2\2yz\7I\2\2z{\7")
        buf.write("G\2\2{|\7V\2\2|\22\3\2\2\2}~\7]\2\2~\24\3\2\2\2\177\u0080")
        buf.write("\7_\2\2\u0080\26\3\2\2\2\u0081\u0082\7>\2\2\u0082\30\3")
        buf.write("\2\2\2\u0083\u0084\7.\2\2\u0084\32\3\2\2\2\u0085\u0086")
        buf.write("\7@\2\2\u0086\34\3\2\2\2\u0087\u0088\7C\2\2\u0088\u0089")
        buf.write("\7F\2\2\u0089\u008a\7X\2\2\u008a\36\3\2\2\2\u008b\u008c")
        buf.write("\7R\2\2\u008c\u008d\7W\2\2\u008d\u008e\7V\2\2\u008e \3")
        buf.write("\2\2\2\u008f\u0090\7T\2\2\u0090\u0091\7G\2\2\u0091\u0092")
        buf.write("\7I\2\2\u0092\"\3\2\2\2\u0093\u0094\7<\2\2\u0094$\3\2")
        buf.write("\2\2\u0095\u0096\7T\2\2\u0096\u0097\7C\2\2\u0097\u0098")
        buf.write("\7O\2\2\u0098&\3\2\2\2\u0099\u009a\7T\2\2\u009a\u009b")
        buf.write("\7Q\2\2\u009b\u009c\7O\2\2\u009c(\3\2\2\2\u009d\u009e")
        buf.write("\7D\2\2\u009e\u009f\7C\2\2\u009f\u00a0\7O\2\2\u00a0*\3")
        buf.write("\2\2\2\u00a1\u00a2\7H\2\2\u00a2\u00a3\7Q\2\2\u00a3\u00a4")
        buf.write("\7T\2\2\u00a4\u00a5\7Y\2\2\u00a5\u00a6\7C\2\2\u00a6\u00a7")
        buf.write("\7T\2\2\u00a7\u00a8\7F\2\2\u00a8,\3\2\2\2\u00a9\u00aa")
        buf.write("\7D\2\2\u00aa\u00ab\7C\2\2\u00ab\u00ac\7E\2\2\u00ac\u00ad")
        buf.write("\7M\2\2\u00ad\u00ae\7Y\2\2\u00ae\u00af\7C\2\2\u00af\u00b0")
        buf.write("\7T\2\2\u00b0\u00b1\7F\2\2\u00b1.\3\2\2\2\u00b2\u00b3")
        buf.write("\7\\\2\2\u00b3\u00b4\7Q\2\2\u00b4\u00b5\7N\2\2\u00b5\60")
        buf.write("\3\2\2\2\u00b6\u00b7\7F\2\2\u00b7\u00b8\7G\2\2\u00b8\u00b9")
        buf.write("\7H\2\2\u00b9\62\3\2\2\2\u00ba\u00bb\7=\2\2\u00bb\64\3")
        buf.write("\2\2\2\u00bc\u00bd\7P\2\2\u00bd\u00be\7Q\2\2\u00be\u00bf")
        buf.write("\7R\2\2\u00bf\66\3\2\2\2\u00c0\u00c1\7L\2\2\u00c1\u00c2")
        buf.write("\7O\2\2\u00c2\u00c3\7R\2\2\u00c38\3\2\2\2\u00c4\u00c5")
        buf.write("\7L\2\2\u00c5\u00c6\7N\2\2\u00c6\u00c7\7V\2\2\u00c7:\3")
        buf.write("\2\2\2\u00c8\u00c9\7T\2\2\u00c9\u00ca\7G\2\2\u00ca\u00cb")
        buf.write("\7U\2\2\u00cb\u00cc\7G\2\2\u00cc\u00cd\7V\2\2\u00cd<\3")
        buf.write("\2\2\2\u00ce\u00cf\7U\2\2\u00cf\u00d0\7G\2\2\u00d0\u00d1")
        buf.write("\7G\2\2\u00d1\u00d2\7M\2\2\u00d2>\3\2\2\2\u00d3\u00d4")
        buf.write("\7O\2\2\u00d4\u00d5\7Q\2\2\u00d5\u00d6\7X\2\2\u00d6@\3")
        buf.write("\2\2\2\u00d7\u00d8\7P\2\2\u00d8\u00d9\7Q\2\2\u00d9\u00da")
        buf.write("\7V\2\2\u00daB\3\2\2\2\u00db\u00dc\7N\2\2\u00dc\u00dd")
        buf.write("\7U\2\2\u00dd\u00de\7J\2\2\u00deD\3\2\2\2\u00df\u00e0")
        buf.write("\7T\2\2\u00e0\u00e1\7U\2\2\u00e1\u00e2\7J\2\2\u00e2F\3")
        buf.write("\2\2\2\u00e3\u00e4\7E\2\2\u00e4\u00e5\7O\2\2\u00e5\u00e6")
        buf.write("\7R\2\2\u00e6H\3\2\2\2\u00e7\u00e8\7C\2\2\u00e8\u00e9")
        buf.write("\7F\2\2\u00e9\u00ea\7F\2\2\u00eaJ\3\2\2\2\u00eb\u00ec")
        buf.write("\7U\2\2\u00ec\u00ed\7W\2\2\u00ed\u00ee\7D\2\2\u00eeL\3")
        buf.write("\2\2\2\u00ef\u00f0\7C\2\2\u00f0\u00f1\7P\2\2\u00f1\u00f2")
        buf.write("\7F\2\2\u00f2N\3\2\2\2\u00f3\u00f4\7Q\2\2\u00f4\u00f5")
        buf.write("\7T\2\2\u00f5P\3\2\2\2\u00f6\u00f7\7Z\2\2\u00f7\u00f8")
        buf.write("\7Q\2\2\u00f8\u00f9\7T\2\2\u00f9R\3\2\2\2\u00fa\u00fb")
        buf.write("\7O\2\2\u00fb\u00fc\7W\2\2\u00fc\u00fd\7N\2\2\u00fdT\3")
        buf.write("\2\2\2\u00fe\u00ff\7C\2\2\u00ff\u0100\7E\2\2\u0100\u0101")
        buf.write("\7E\2\2\u0101V\3\2\2\2\u0102\u0103\7*\2\2\u0103X\3\2\2")
        buf.write("\2\u0104\u0105\7+\2\2\u0105Z\3\2\2\2\u0106\u0108\t\2\2")
        buf.write("\2\u0107\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u0107")
        buf.write("\3\2\2\2\u0109\u010a\3\2\2\2\u010a\\\3\2\2\2\u010b\u010c")
        buf.write("\7\62\2\2\u010c\u010e\t\3\2\2\u010d\u010f\t\4\2\2\u010e")
        buf.write("\u010d\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u010e\3\2\2\2")
        buf.write("\u0110\u0111\3\2\2\2\u0111^\3\2\2\2\u0112\u0113\7\62\2")
        buf.write("\2\u0113\u0115\t\5\2\2\u0114\u0116\t\6\2\2\u0115\u0114")
        buf.write("\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0115\3\2\2\2\u0117")
        buf.write("\u0118\3\2\2\2\u0118`\3\2\2\2\u0119\u011a\7\62\2\2\u011a")
        buf.write("\u011c\t\7\2\2\u011b\u011d\t\b\2\2\u011c\u011b\3\2\2\2")
        buf.write("\u011d\u011e\3\2\2\2\u011e\u011c\3\2\2\2\u011e\u011f\3")
        buf.write("\2\2\2\u011fb\3\2\2\2\u0120\u0124\t\t\2\2\u0121\u0123")
        buf.write("\t\n\2\2\u0122\u0121\3\2\2\2\u0123\u0126\3\2\2\2\u0124")
        buf.write("\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125d\3\2\2\2\u0126")
        buf.write("\u0124\3\2\2\2\u0127\u0128\7\61\2\2\u0128\u0129\7\61\2")
        buf.write("\2\u0129\u012a\7,\2\2\u012a\u012e\3\2\2\2\u012b\u012d")
        buf.write("\13\2\2\2\u012c\u012b\3\2\2\2\u012d\u0130\3\2\2\2\u012e")
        buf.write("\u012f\3\2\2\2\u012e\u012c\3\2\2\2\u012f\u0131\3\2\2\2")
        buf.write("\u0130\u012e\3\2\2\2\u0131\u0132\7,\2\2\u0132\u0133\7")
        buf.write("\61\2\2\u0133\u0134\7\61\2\2\u0134\u0135\3\2\2\2\u0135")
        buf.write("\u0136\b\63\2\2\u0136f\3\2\2\2\u0137\u0138\7\61\2\2\u0138")
        buf.write("\u0139\7\61\2\2\u0139\u013d\3\2\2\2\u013a\u013c\13\2\2")
        buf.write("\2\u013b\u013a\3\2\2\2\u013c\u013f\3\2\2\2\u013d\u013e")
        buf.write("\3\2\2\2\u013d\u013b\3\2\2\2\u013e\u0141\3\2\2\2\u013f")
        buf.write("\u013d\3\2\2\2\u0140\u0142\t\13\2\2\u0141\u0140\3\2\2")
        buf.write("\2\u0142\u0143\3\2\2\2\u0143\u0141\3\2\2\2\u0143\u0144")
        buf.write("\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146\b\64\2\2\u0146")
        buf.write("h\3\2\2\2\u0147\u0149\t\f\2\2\u0148\u0147\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014a\u0148\3\2\2\2\u014a\u014b\3\2\2\2")
        buf.write("\u014b\u014c\3\2\2\2\u014c\u014d\b\65\2\2\u014dj\3\2\2")
        buf.write("\2\f\2\u0109\u0110\u0117\u011e\u0124\u012e\u013d\u0143")
        buf.write("\u014a\3\b\2\2")
        return buf.getvalue()


class FPE_assemblyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    ORB = 43
    CRB = 44
    DEC_NUM = 45
    BIN_NUM = 46
    OCT_NUM = 47
    HEX_NUM = 48
    IDENTIFER = 49
    MUTL_LINE_COMMENT = 50
    SING_LINE_COMMENT = 51
    WHITESPACE = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'*'", "'/'", "'%'", "'+'", "'-'", "'{'", "'}'", "'GET'", "'['", 
            "']'", "'<'", "','", "'>'", "'ADV'", "'PUT'", "'REG'", "':'", 
            "'RAM'", "'ROM'", "'BAM'", "'FORWARD'", "'BACKWARD'", "'ZOL'", 
            "'DEF'", "';'", "'NOP'", "'JMP'", "'JLT'", "'RESET'", "'SEEK'", 
            "'MOV'", "'NOT'", "'LSH'", "'RSH'", "'CMP'", "'ADD'", "'SUB'", 
            "'AND'", "'OR'", "'XOR'", "'MUL'", "'ACC'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "ORB", "CRB", "DEC_NUM", "BIN_NUM", "OCT_NUM", "HEX_NUM", "IDENTIFER", 
            "MUTL_LINE_COMMENT", "SING_LINE_COMMENT", "WHITESPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "ORB", "CRB", "DEC_NUM", 
                  "BIN_NUM", "OCT_NUM", "HEX_NUM", "IDENTIFER", "MUTL_LINE_COMMENT", 
                  "SING_LINE_COMMENT", "WHITESPACE" ]

    grammarFileName = "FPE_assembly.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


