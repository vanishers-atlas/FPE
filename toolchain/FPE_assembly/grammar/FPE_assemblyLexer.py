# Generated from FPE_assembly.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\62")
        buf.write("\u0136\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\3\3\3\3\4\3\4")
        buf.write("\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3")
        buf.write("\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\17")
        buf.write("\3\17\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22")
        buf.write("\3\22\3\22\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\30\3\30")
        buf.write("\3\31\3\31\3\31\3\31\3\32\3\32\3\33\3\33\3\33\3\33\3\34")
        buf.write("\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3!\3!")
        buf.write("\3!\3!\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3$\3$\3$\3$\3%\3%\3")
        buf.write("%\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3(\3(\3)\3)\3*\6*\u00f0")
        buf.write("\n*\r*\16*\u00f1\3+\3+\3+\6+\u00f7\n+\r+\16+\u00f8\3,")
        buf.write("\3,\3,\6,\u00fe\n,\r,\16,\u00ff\3-\3-\3-\6-\u0105\n-\r")
        buf.write("-\16-\u0106\3.\3.\7.\u010b\n.\f.\16.\u010e\13.\3/\3/\3")
        buf.write("/\3/\3/\7/\u0115\n/\f/\16/\u0118\13/\3/\3/\3/\3/\3/\3")
        buf.write("/\3\60\3\60\3\60\3\60\7\60\u0124\n\60\f\60\16\60\u0127")
        buf.write("\13\60\3\60\6\60\u012a\n\60\r\60\16\60\u012b\3\60\3\60")
        buf.write("\3\61\6\61\u0131\n\61\r\61\16\61\u0132\3\61\3\61\4\u0116")
        buf.write("\u0125\2\62\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25")
        buf.write("\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+")
        buf.write("\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E")
        buf.write("$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62\3\2\r\3\2\62;\4\2")
        buf.write("DDdd\3\2\62\63\4\2QQqq\3\2\629\4\2ZZzz\5\2\62;CHch\5\2")
        buf.write("C\\aac|\6\2\62;C\\aac|\4\2\f\f\17\17\5\2\13\f\17\17\"")
        buf.write("\"\2\u013e\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2")
        buf.write("\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2")
        buf.write("\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2")
        buf.write("\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#")
        buf.write("\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2")
        buf.write("\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65")
        buf.write("\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2")
        buf.write("\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2")
        buf.write("\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2")
        buf.write("\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3")
        buf.write("\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\3c\3\2\2\2\5e")
        buf.write("\3\2\2\2\7g\3\2\2\2\ti\3\2\2\2\13k\3\2\2\2\rm\3\2\2\2")
        buf.write("\17o\3\2\2\2\21q\3\2\2\2\23u\3\2\2\2\25w\3\2\2\2\27y\3")
        buf.write("\2\2\2\31{\3\2\2\2\33}\3\2\2\2\35\177\3\2\2\2\37\u0083")
        buf.write("\3\2\2\2!\u0087\3\2\2\2#\u008b\3\2\2\2%\u008f\3\2\2\2")
        buf.write("\'\u0093\3\2\2\2)\u0097\3\2\2\2+\u009f\3\2\2\2-\u00a8")
        buf.write("\3\2\2\2/\u00ac\3\2\2\2\61\u00ae\3\2\2\2\63\u00b2\3\2")
        buf.write("\2\2\65\u00b4\3\2\2\2\67\u00b8\3\2\2\29\u00bc\3\2\2\2")
        buf.write(";\u00c0\3\2\2\2=\u00c6\3\2\2\2?\u00cb\3\2\2\2A\u00cf\3")
        buf.write("\2\2\2C\u00d3\3\2\2\2E\u00d7\3\2\2\2G\u00db\3\2\2\2I\u00df")
        buf.write("\3\2\2\2K\u00e2\3\2\2\2M\u00e6\3\2\2\2O\u00ea\3\2\2\2")
        buf.write("Q\u00ec\3\2\2\2S\u00ef\3\2\2\2U\u00f3\3\2\2\2W\u00fa\3")
        buf.write("\2\2\2Y\u0101\3\2\2\2[\u0108\3\2\2\2]\u010f\3\2\2\2_\u011f")
        buf.write("\3\2\2\2a\u0130\3\2\2\2cd\7,\2\2d\4\3\2\2\2ef\7\61\2\2")
        buf.write("f\6\3\2\2\2gh\7\'\2\2h\b\3\2\2\2ij\7-\2\2j\n\3\2\2\2k")
        buf.write("l\7/\2\2l\f\3\2\2\2mn\7}\2\2n\16\3\2\2\2op\7\177\2\2p")
        buf.write("\20\3\2\2\2qr\7I\2\2rs\7G\2\2st\7V\2\2t\22\3\2\2\2uv\7")
        buf.write("]\2\2v\24\3\2\2\2wx\7_\2\2x\26\3\2\2\2yz\7>\2\2z\30\3")
        buf.write("\2\2\2{|\7.\2\2|\32\3\2\2\2}~\7@\2\2~\34\3\2\2\2\177\u0080")
        buf.write("\7C\2\2\u0080\u0081\7F\2\2\u0081\u0082\7X\2\2\u0082\36")
        buf.write("\3\2\2\2\u0083\u0084\7R\2\2\u0084\u0085\7W\2\2\u0085\u0086")
        buf.write("\7V\2\2\u0086 \3\2\2\2\u0087\u0088\7T\2\2\u0088\u0089")
        buf.write("\7G\2\2\u0089\u008a\7I\2\2\u008a\"\3\2\2\2\u008b\u008c")
        buf.write("\7T\2\2\u008c\u008d\7C\2\2\u008d\u008e\7O\2\2\u008e$\3")
        buf.write("\2\2\2\u008f\u0090\7T\2\2\u0090\u0091\7Q\2\2\u0091\u0092")
        buf.write("\7O\2\2\u0092&\3\2\2\2\u0093\u0094\7D\2\2\u0094\u0095")
        buf.write("\7C\2\2\u0095\u0096\7O\2\2\u0096(\3\2\2\2\u0097\u0098")
        buf.write("\7H\2\2\u0098\u0099\7Q\2\2\u0099\u009a\7T\2\2\u009a\u009b")
        buf.write("\7Y\2\2\u009b\u009c\7C\2\2\u009c\u009d\7T\2\2\u009d\u009e")
        buf.write("\7F\2\2\u009e*\3\2\2\2\u009f\u00a0\7D\2\2\u00a0\u00a1")
        buf.write("\7C\2\2\u00a1\u00a2\7E\2\2\u00a2\u00a3\7M\2\2\u00a3\u00a4")
        buf.write("\7Y\2\2\u00a4\u00a5\7C\2\2\u00a5\u00a6\7T\2\2\u00a6\u00a7")
        buf.write("\7F\2\2\u00a7,\3\2\2\2\u00a8\u00a9\7\\\2\2\u00a9\u00aa")
        buf.write("\7Q\2\2\u00aa\u00ab\7N\2\2\u00ab.\3\2\2\2\u00ac\u00ad")
        buf.write("\7<\2\2\u00ad\60\3\2\2\2\u00ae\u00af\7F\2\2\u00af\u00b0")
        buf.write("\7G\2\2\u00b0\u00b1\7H\2\2\u00b1\62\3\2\2\2\u00b2\u00b3")
        buf.write("\7=\2\2\u00b3\64\3\2\2\2\u00b4\u00b5\7P\2\2\u00b5\u00b6")
        buf.write("\7Q\2\2\u00b6\u00b7\7R\2\2\u00b7\66\3\2\2\2\u00b8\u00b9")
        buf.write("\7L\2\2\u00b9\u00ba\7O\2\2\u00ba\u00bb\7R\2\2\u00bb8\3")
        buf.write("\2\2\2\u00bc\u00bd\7L\2\2\u00bd\u00be\7N\2\2\u00be\u00bf")
        buf.write("\7V\2\2\u00bf:\3\2\2\2\u00c0\u00c1\7T\2\2\u00c1\u00c2")
        buf.write("\7G\2\2\u00c2\u00c3\7U\2\2\u00c3\u00c4\7G\2\2\u00c4\u00c5")
        buf.write("\7V\2\2\u00c5<\3\2\2\2\u00c6\u00c7\7U\2\2\u00c7\u00c8")
        buf.write("\7G\2\2\u00c8\u00c9\7G\2\2\u00c9\u00ca\7M\2\2\u00ca>\3")
        buf.write("\2\2\2\u00cb\u00cc\7O\2\2\u00cc\u00cd\7Q\2\2\u00cd\u00ce")
        buf.write("\7X\2\2\u00ce@\3\2\2\2\u00cf\u00d0\7P\2\2\u00d0\u00d1")
        buf.write("\7Q\2\2\u00d1\u00d2\7V\2\2\u00d2B\3\2\2\2\u00d3\u00d4")
        buf.write("\7E\2\2\u00d4\u00d5\7O\2\2\u00d5\u00d6\7R\2\2\u00d6D\3")
        buf.write("\2\2\2\u00d7\u00d8\7C\2\2\u00d8\u00d9\7F\2\2\u00d9\u00da")
        buf.write("\7F\2\2\u00daF\3\2\2\2\u00db\u00dc\7C\2\2\u00dc\u00dd")
        buf.write("\7P\2\2\u00dd\u00de\7F\2\2\u00deH\3\2\2\2\u00df\u00e0")
        buf.write("\7Q\2\2\u00e0\u00e1\7T\2\2\u00e1J\3\2\2\2\u00e2\u00e3")
        buf.write("\7Z\2\2\u00e3\u00e4\7Q\2\2\u00e4\u00e5\7T\2\2\u00e5L\3")
        buf.write("\2\2\2\u00e6\u00e7\7C\2\2\u00e7\u00e8\7E\2\2\u00e8\u00e9")
        buf.write("\7E\2\2\u00e9N\3\2\2\2\u00ea\u00eb\7*\2\2\u00ebP\3\2\2")
        buf.write("\2\u00ec\u00ed\7+\2\2\u00edR\3\2\2\2\u00ee\u00f0\t\2\2")
        buf.write("\2\u00ef\u00ee\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00ef")
        buf.write("\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2T\3\2\2\2\u00f3\u00f4")
        buf.write("\7\62\2\2\u00f4\u00f6\t\3\2\2\u00f5\u00f7\t\4\2\2\u00f6")
        buf.write("\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00f6\3\2\2\2")
        buf.write("\u00f8\u00f9\3\2\2\2\u00f9V\3\2\2\2\u00fa\u00fb\7\62\2")
        buf.write("\2\u00fb\u00fd\t\5\2\2\u00fc\u00fe\t\6\2\2\u00fd\u00fc")
        buf.write("\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u00fd\3\2\2\2\u00ff")
        buf.write("\u0100\3\2\2\2\u0100X\3\2\2\2\u0101\u0102\7\62\2\2\u0102")
        buf.write("\u0104\t\7\2\2\u0103\u0105\t\b\2\2\u0104\u0103\3\2\2\2")
        buf.write("\u0105\u0106\3\2\2\2\u0106\u0104\3\2\2\2\u0106\u0107\3")
        buf.write("\2\2\2\u0107Z\3\2\2\2\u0108\u010c\t\t\2\2\u0109\u010b")
        buf.write("\t\n\2\2\u010a\u0109\3\2\2\2\u010b\u010e\3\2\2\2\u010c")
        buf.write("\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d\\\3\2\2\2\u010e")
        buf.write("\u010c\3\2\2\2\u010f\u0110\7\61\2\2\u0110\u0111\7\61\2")
        buf.write("\2\u0111\u0112\7,\2\2\u0112\u0116\3\2\2\2\u0113\u0115")
        buf.write("\13\2\2\2\u0114\u0113\3\2\2\2\u0115\u0118\3\2\2\2\u0116")
        buf.write("\u0117\3\2\2\2\u0116\u0114\3\2\2\2\u0117\u0119\3\2\2\2")
        buf.write("\u0118\u0116\3\2\2\2\u0119\u011a\7,\2\2\u011a\u011b\7")
        buf.write("\61\2\2\u011b\u011c\7\61\2\2\u011c\u011d\3\2\2\2\u011d")
        buf.write("\u011e\b/\2\2\u011e^\3\2\2\2\u011f\u0120\7\61\2\2\u0120")
        buf.write("\u0121\7\61\2\2\u0121\u0125\3\2\2\2\u0122\u0124\13\2\2")
        buf.write("\2\u0123\u0122\3\2\2\2\u0124\u0127\3\2\2\2\u0125\u0126")
        buf.write("\3\2\2\2\u0125\u0123\3\2\2\2\u0126\u0129\3\2\2\2\u0127")
        buf.write("\u0125\3\2\2\2\u0128\u012a\t\13\2\2\u0129\u0128\3\2\2")
        buf.write("\2\u012a\u012b\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c")
        buf.write("\3\2\2\2\u012c\u012d\3\2\2\2\u012d\u012e\b\60\2\2\u012e")
        buf.write("`\3\2\2\2\u012f\u0131\t\f\2\2\u0130\u012f\3\2\2\2\u0131")
        buf.write("\u0132\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2")
        buf.write("\u0133\u0134\3\2\2\2\u0134\u0135\b\61\2\2\u0135b\3\2\2")
        buf.write("\2\f\2\u00f1\u00f8\u00ff\u0106\u010c\u0116\u0125\u012b")
        buf.write("\u0132\3\b\2\2")
        return buf.getvalue()


class FPE_assemblyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    ORB = 39
    CRB = 40
    DEC_NUM = 41
    BIN_NUM = 42
    OCT_NUM = 43
    HEX_NUM = 44
    IDENTIFER = 45
    MUTL_LINE_COMMENT = 46
    SING_LINE_COMMENT = 47
    WHITESPACE = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'*'", "'/'", "'%'", "'+'", "'-'", "'{'", "'}'", "'GET'", "'['", 
            "']'", "'<'", "','", "'>'", "'ADV'", "'PUT'", "'REG'", "'RAM'", 
            "'ROM'", "'BAM'", "'FORWARD'", "'BACKWARD'", "'ZOL'", "':'", 
            "'DEF'", "';'", "'NOP'", "'JMP'", "'JLT'", "'RESET'", "'SEEK'", 
            "'MOV'", "'NOT'", "'CMP'", "'ADD'", "'AND'", "'OR'", "'XOR'", 
            "'ACC'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "ORB", "CRB", "DEC_NUM", "BIN_NUM", "OCT_NUM", "HEX_NUM", "IDENTIFER", 
            "MUTL_LINE_COMMENT", "SING_LINE_COMMENT", "WHITESPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "ORB", "CRB", "DEC_NUM", "BIN_NUM", "OCT_NUM", "HEX_NUM", 
                  "IDENTIFER", "MUTL_LINE_COMMENT", "SING_LINE_COMMENT", 
                  "WHITESPACE" ]

    grammarFileName = "FPE_assembly.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


