{
	RESET BAM[0];
	RESET BAM[1];
	NOP;

	// Test comparing 2 fetched values
	ZOL(16)
	{
		ZOL(16)
		{
			ucmp_F_F_compare:
				UCMP(ROMA[BAM[0]], ROMA[BAM[1]<FORWARD,STEP:1>]);
				NOP;

				JLT(ucmp_F_F_jump);
				NOP;
				NOP;
				NOP;

			ucmp_F_F_fallthrough:
				MOV(0, PUT[0]);
				JMP(ucmp_F_F_collect);
				NOP;
				NOP;
				NOP;

			ucmp_F_F_jump:
				MOV(1, PUT[0]);

			ucmp_F_F_collect:
				NOP;
		}
		SEEK BAM[0](1)<FORWARD>;
		NOP;
	}
	NOP;

	// Test comparing fetched and acc values
	ZOL(16)
	{
		ZOL(16)
		{
			ucmp_F_A_compare:
				MOV(ROMA[BAM[1]<FORWARD,STEP:1>], ACC);
				UCMP(ROMA[BAM[0]], ACC);
				NOP;

				JLT(ucmp_F_A_jump);
				NOP;
				NOP;
				NOP;

			ucmp_F_A_fallthrough:
				MOV(0, PUT[0]);
				JMP(ucmp_F_A_collect);
				NOP;
				NOP;
				NOP;

			ucmp_F_A_jump:
				MOV(1, PUT[0]);

			ucmp_F_A_collect:
				NOP;
		}
		SEEK BAM[0](1)<FORWARD>;
		NOP;
	}
	NOP;

	// Test comparing acc and fetched values
	ZOL(16)
	{
		ZOL(16)
		{
			ucmp_A_F_compare:
				MOV(ROMA[BAM[0]], ACC);
				UCMP(ACC, ROMA[BAM[1]<FORWARD,STEP:1>]);
				NOP;

				JLT(ucmp_A_F_jump);
				NOP;
				NOP;
				NOP;

			ucmp_A_F_fallthrough:
				MOV(0, PUT[0]);
				JMP(ucmp_A_F_collect);
				NOP;
				NOP;
				NOP;

			ucmp_A_F_jump:
				MOV(1, PUT[0]);

			ucmp_A_F_collect:
				NOP;
		}
		SEEK BAM[0](1)<FORWARD>;
		NOP;
	}
	NOP;

	// Test comparing 2 acc values
	ZOL(16)
	{
		ucmp_A_A_compare:
			MOV(ROMA[BAM[0]<FORWARD,STEP:1>], ACC);
			UCMP(ACC, ACC);
			NOP;

			JLT(ucmp_A_A_jump);
			NOP;
			NOP;
			NOP;

		ucmp_A_A_fallthrough:
			MOV(0, PUT[0]);
			JMP(ucmp_A_A_collect);
			NOP;
			NOP;
			NOP;

		ucmp_A_A_jump:
			MOV(1, PUT[0]);

		ucmp_A_A_collect:
			NOP;
	}

	NOP;

	// Test comparing 2 fetched values
	ZOL(16)
	{
		ZOL(16)
		{
			scmp_F_F_compare:
				SCMP(ROMA[BAM[0]], ROMA[BAM[1]<FORWARD,STEP:1>]);
				NOP;

				JLT(scmp_F_F_jump);
				NOP;
				NOP;
				NOP;

			scmp_F_F_fallthrough:
				MOV(0, PUT[0]);
				JMP(scmp_F_F_collect);
				NOP;
				NOP;
				NOP;

			scmp_F_F_jump:
				MOV(1, PUT[0]);

			scmp_F_F_collect:
				NOP;
		}
		SEEK BAM[0](1)<FORWARD>;
		NOP;
	}
	NOP;

	// Test comparing fetched and acc values
	ZOL(16)
	{
		ZOL(16)
		{
			scmp_F_A_compare:
				MOV(ROMA[BAM[1]<FORWARD,STEP:1>], ACC);
				SCMP(ROMA[BAM[0]], ACC);
				NOP;

				JLT(scmp_F_A_jump);
				NOP;
				NOP;
				NOP;

			scmp_F_A_fallthrough:
				MOV(0, PUT[0]);
				JMP(scmp_F_A_collect);
				NOP;
				NOP;
				NOP;

			scmp_F_A_jump:
				MOV(1, PUT[0]);

			scmp_F_A_collect:
				NOP;
		}
		SEEK BAM[0](1)<FORWARD>;
		NOP;
	}
	NOP;

	// Test comparing acc and fetched values
	ZOL(16)
	{
		ZOL(16)
		{
			scmp_A_F_compare:
				MOV(ROMA[BAM[0]], ACC);
				SCMP(ACC, ROMA[BAM[1]<FORWARD,STEP:1>]);
				NOP;

				JLT(scmp_A_F_jump);
				NOP;
				NOP;
				NOP;

			scmp_A_F_fallthrough:
				MOV(0, PUT[0]);
				JMP(scmp_A_F_collect);
				NOP;
				NOP;
				NOP;

			scmp_A_F_jump:
				MOV(1, PUT[0]);

			scmp_A_F_collect:
				NOP;
		}
		SEEK BAM[0](1)<FORWARD>;
		NOP;
	}
	NOP;

	// Test comparing 2 acc values
	ZOL(16)
	{
		scmp_A_A_compare:
			MOV(ROMA[BAM[0]<FORWARD,STEP:1>], ACC);
			SCMP(ACC, ACC);
			NOP;

			JLT(scmp_A_A_jump);
			NOP;
			NOP;
			NOP;

		scmp_A_A_fallthrough:
			MOV(0, PUT[0]);
			JMP(scmp_A_A_collect);
			NOP;
			NOP;
			NOP;

		scmp_A_A_jump:
			MOV(1, PUT[0]);

		scmp_A_A_collect:
			NOP;
	}

	NOP;
}
