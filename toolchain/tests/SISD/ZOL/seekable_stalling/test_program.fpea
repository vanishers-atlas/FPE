{
  COM zol_30 : ZOL_ripple(
    overwrites : 30,
    seekable : true
  );

  COM zol_60 : ZOL_ripple(
    overwrites : 60,
    seekable : true
  );

  zol_30.SEEK(solo_single_instr_30);
  NOP;
  NOP;
  NOP;

  LOOP solo_single_instr_30 :
  {
    MOV (0b0000, PUT[0]);
  }
  NOP;
  NOP;
  NOP;



  zol_60.SEEK(solo_single_instr_60);
  NOP;
  NOP;
  NOP;

  LOOP solo_single_instr_60 :
  {
    MOV (0b0001, PUT[0]);
  }
  NOP;
  NOP;
  NOP;



  zol_30.SEEK(solo_multi_instr_30);
  NOP;
  NOP;
  NOP;

  LOOP solo_multi_instr_30 :
  {
    MOV (0b0100, PUT[0]);
    MOV (0b0101, PUT[0]);
  }
  NOP;
  NOP;


  zol_60.SEEK(solo_multi_instr_60);
  NOP;
  NOP;
  NOP;

  LOOP solo_multi_instr_60 :
  {
    MOV (0b0110, PUT[0]);
    MOV (0b0111, PUT[0]);
  }
  NOP;
  NOP;


  ZOL(2)
  {

    zol_30.SEEK(nested_single_instr_30);
    NOP;
    NOP;
    NOP;

    LOOP nested_single_instr_30 :
    {
      MOV (0b1000, PUT[0]);
    }
    NOP;
    NOP;
    NOP;



    zol_60.SEEK(nested_single_instr_60);
    NOP;
    NOP;
    NOP;

    LOOP nested_single_instr_60 :
    {
      MOV (0b1001, PUT[0]);
    }
    NOP;
    NOP;
    NOP;



    zol_30.SEEK(nested_multi_instr_30);
    NOP;
    NOP;
    NOP;

    LOOP nested_multi_instr_30 :
    {
      MOV (0b1100, PUT[0]);
      MOV (0b1101, PUT[0]);
    }
    NOP;
    NOP;


    zol_60.SEEK(nested_multi_instr_60);
    NOP;
    NOP;
    NOP;

    LOOP nested_multi_instr_60 :
    {
      MOV (0b1110, PUT[0]);
      MOV (0b1111, PUT[0]);
    }
    NOP;
    NOP;
  }
  NOP;
}
