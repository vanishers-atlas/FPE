{
  // Test that ALU freezes, instead of repeats the the some instrust on a stall
  MOV(0, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);

  MOV(0, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);

  MOV(0, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);

  MOV(0, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
  ADD(1, ACC, ACC);
  MOV(ACC, PUT[0]);
}
