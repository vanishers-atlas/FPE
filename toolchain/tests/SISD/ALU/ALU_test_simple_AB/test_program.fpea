{
  // Test basic (pass through) MOV,
  // already been tested by output test, but included for completeness
  MOV(0, PUT[0]);

  // Test acc as result destination
  MOV(1, ACC);
  MOV(ACC, PUT[0]);

  // Test acc auto racall
  MOV(2, PUT[0]);
  MOV(ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test left shifts
  LSH(0b0110, 1, PUT[0]);

  MOV(0b0110, ACC);
  LSH(ACC, 1, PUT[0]);

  LSH(0b0110, 2, PUT[0]);

  MOV(0b0110, ACC);
  LSH(ACC, 2, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test right shifts
  RSH(0b0110, 1, PUT[0]);

  MOV(0b0110, ACC);
  RSH(ACC, 1, PUT[0]);

  RSH(0b0110, 2, PUT[0]);

  MOV(0b0110, ACC);
  RSH(ACC, 2, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test left rolls
  LRL(0b0110, 1, PUT[0]);

  MOV(0b0110, ACC);
  LRL(ACC, 1, PUT[0]);

  LRL(0b0110, 2, PUT[0]);

  MOV(0b0110, ACC);
  LRL(ACC, 2, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test right rolls
  RRL(0b0110, 1, PUT[0]);

  MOV(0b0110, ACC);
  RRL(ACC, 1, PUT[0]);

  RRL(0b0110, 2, PUT[0]);

  MOV(0b0110, ACC);
  RRL(ACC, 2, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test multipleation
  MUL(2, 2, PUT[0]);

  MOV(2, ACC);
  MUL(2, ACC, PUT[0]);

  MOV(2, ACC);
  MUL(ACC, 2, PUT[0]);

  MOV(2, ACC);
  MUL(ACC, ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test ADD
  ADD(1, 1, PUT[0]);

  MOV(1, ACC);
  ADD(1, ACC, PUT[0]);

  MOV(1, ACC);
  ADD(ACC, 1, PUT[0]);

  MOV(1, ACC);
  ADD(ACC, ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test SUB
  SUB(2, 1, PUT[0]);

  SUB(1, 2, PUT[0]);

  MOV(2, ACC);
  SUB(ACC, 1, PUT[0]);

  MOV(1, ACC);
  SUB(2, ACC, PUT[0]);

  MOV(1, ACC);
  SUB(ACC, ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test NOT
  NOT(0b0110, PUT[0]);

  MOV(0b0110, ACC);
  NOT(ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test OR
  OR(0b0101, 0b0011, PUT[0]);

  MOV(0b0011, ACC);
  OR(0b0101, ACC, PUT[0]);

  MOV(0b0101, ACC);
  OR(ACC, 0b0011, PUT[0]);

  MOV(0b0110, ACC);
  OR(ACC, ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test AND
  AND(0b0101, 0b0011, PUT[0]);

  MOV(0b0011, ACC);
  AND(0b0101, ACC, PUT[0]);

  MOV(0b0101, ACC);
  AND(ACC, 0b0011, PUT[0]);

  MOV(0b0110, ACC);
  AND(ACC, ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test XOR
  XOR(0b0101, 0b0011, PUT[0]);

  MOV(0b0011, ACC);
  XOR(0b0101, ACC, PUT[0]);

  MOV(0b0101, ACC);
  XOR(ACC, 0b0011, PUT[0]);

  MOV(0b0110, ACC);
  XOR(ACC, ACC, PUT[0]);
}
