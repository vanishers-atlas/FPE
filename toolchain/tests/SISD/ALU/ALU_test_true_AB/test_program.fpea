{
  // Test basic (pass through) MOV,
  // already been tested by output test, but included for completeness
  MOV(0b001100110011001100110011001100111100001111000011110000111100, PUT[0]);

  // Test acc as result destination
  MOV(0b11000011110000111100001111000011, ACC);
  MOV(ACC, PUT[0]);

  // Test acc auto racall
  MOV(0b01101001011010010110100101101001, PUT[0]);
  MOV(ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test left shifts
  LSH(0b11001100001111000011110000110011, 1, PUT[0]);

  MOV(0b11001100001111000011110000110011, ACC);
  LSH(ACC, 1, PUT[0]);

  LSH(0b11001100001111000011110000110011, 2, PUT[0]);

  MOV(0b11001100001111000011110000110011, ACC);
  LSH(ACC, 2, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test right shifts
  RSH(0b11001100001111000011110000110011, 1, PUT[0]);

  MOV(0b11001100001111000011110000110011, ACC);
  RSH(ACC, 1, PUT[0]);

  RSH(0b11001100001111000011110000110011, 2, PUT[0]);

  MOV(0b11001100001111000011110000110011, ACC);
  RSH(ACC, 2, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test left rolls
  LRL(0b11001100001111000011110000110011, 1, PUT[0]);

  MOV(0b11001100001111000011110000110011, ACC);
  LRL(ACC, 1, PUT[0]);

  LRL(0b11001100001111000011110000110011, 2, PUT[0]);

  MOV(0b11001100001111000011110000110011, ACC);
  LRL(ACC, 2, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test right rolls
  RRL(0b11001100001111000011110000110011, 1, PUT[0]);

  MOV(0b11001100001111000011110000110011, ACC);
  RRL(ACC, 1, PUT[0]);

  RRL(0b11001100001111000011110000110011, 2, PUT[0]);

  MOV(0b11001100001111000011110000110011, ACC);
  RRL(ACC, 2, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test multipleation
  MUL(2, 2, PUT[0]);

  MOV(2, ACC);
  MUL(2, ACC, PUT[0]);

  MOV(2, ACC);
  MUL(ACC, 2, PUT[0]);

  MOV(2, ACC);
  MUL(ACC, ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test ADD
  ADD(0b00010000000000000000000000000010, 0b00010000000000000000000000000010, PUT[0]);

  MOV(0b00010000000000000000000000000010, ACC);
  ADD(0b00010000000000000000000000000010, ACC, PUT[0]);

  MOV(0b00010000000000000000000000000010, ACC);
  ADD(ACC, 0b00010000000000000000000000000010, PUT[0]);

  MOV(0b00010000000000000000000000000010, ACC);
  ADD(ACC, ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test SUB
  SUB(0b00010000000000000000000000000011, 0b00010000000000000000000000000010, PUT[0]);

  SUB(0b00010000000000000000000000000010, 0b00010000000000000000000000000011, PUT[0]);

  MOV(0b00010000000000000000000000000011, ACC);
  SUB(ACC, 0b00010000000000000000000000000010, PUT[0]);

  MOV(0b00010000000000000000000000000010, ACC);
  SUB(0b00010000000000000000000000000011, ACC, PUT[0]);

  MOV(0b00010000000000000000000000000010, ACC);
  SUB(ACC, ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test NOT
  NOT(0b01010101010101010101010101010101, PUT[0]);

  MOV(0b01010101010101010101010101010101, ACC);
  NOT(ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test OR
  OR(0b01010101010101010101010101010101, 0b00110011001100110011001100110011, PUT[0]);

  MOV(0b00110011001100110011001100110011, ACC);
  OR(0b01010101010101010101010101010101, ACC, PUT[0]);

  MOV(0b01010101010101010101010101010101, ACC);
  OR(ACC, 0b00110011001100110011001100110011, PUT[0]);

  MOV(0b01010101010101010101010101010101, ACC);
  OR(ACC, ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test AND
  AND(0b01010101010101010101010101010101, 0b00110011001100110011001100110011, PUT[0]);

  MOV(0b00110011001100110011001100110011, ACC);
  AND(0b01010101010101010101010101010101, ACC, PUT[0]);

  MOV(0b01010101010101010101010101010101, ACC);
  AND(ACC, 0b00110011001100110011001100110011, PUT[0]);

  MOV(0b01010101010101010101010101010101, ACC);
  AND(ACC, ACC, PUT[0]);

  NOP;
  NOP;
  NOP;
  NOP;

  // Test XOR
  XOR(0b01010101010101010101010101010101, 0b00110011001100110011001100110011, PUT[0]);

  MOV(0b00110011001100110011001100110011, ACC);
  XOR(0b01010101010101010101010101010101, ACC, PUT[0]);

  MOV(0b01010101010101010101010101010101, ACC);
  XOR(ACC, 0b00110011001100110011001100110011, PUT[0]);

  MOV(0b01010101010101010101010101010101, ACC);
  XOR(ACC, ACC, PUT[0]);
}
