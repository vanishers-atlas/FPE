{
  // Test MOV
  MOV(0b0000, PUT[0]);
  MOV(ACC, PUT[0]);
  MOV(0b0011, PUT[0]);
  MOV(ACC, PUT[0]);
  MOV(0b1100, PUT[0]);
  MOV(ACC, PUT[0]);
  MOV(0b1111, PUT[0]);
  MOV(ACC, PUT[0]);

  NOP; NOP; NOP; NOP;


  // Test left shifts and rolls
  LSH(0b0001, 1, PUT[0]);
  LSH(ACC, 1, PUT[0]);
  LSH(ACC, 1, PUT[0]);
  LSH(ACC, 1, PUT[0]);
  NOP;

  LSH(0b0010, 1, PUT[0]);
  LSH(ACC, 1, PUT[0]);
  LSH(ACC, 1, PUT[0]);
  LSH(ACC, 1, PUT[0]);
  NOP;

  LSH(0b0100, 1, PUT[0]);
  LSH(ACC, 1, PUT[0]);
  LSH(ACC, 1, PUT[0]);
  LSH(ACC, 1, PUT[0]);
  NOP;

  LSH(0b1000, 1, PUT[0]);
  LSH(ACC, 1, PUT[0]);
  LSH(ACC, 1, PUT[0]);
  LSH(ACC, 1, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;

  LSH(0b0001, 2, PUT[0]);
  LSH(ACC, 2, PUT[0]);
  LSH(ACC, 2, PUT[0]);
  LSH(ACC, 2, PUT[0]);
  NOP;

  LSH(0b0010, 2, PUT[0]);
  LSH(ACC, 2, PUT[0]);
  LSH(ACC, 2, PUT[0]);
  LSH(ACC, 2, PUT[0]);
  NOP;

  LSH(0b0100, 2, PUT[0]);
  LSH(ACC, 2, PUT[0]);
  LSH(ACC, 2, PUT[0]);
  LSH(ACC, 2, PUT[0]);
  NOP;

  LSH(0b1000, 2, PUT[0]);
  LSH(ACC, 2, PUT[0]);
  LSH(ACC, 2, PUT[0]);
  LSH(ACC, 2, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;

  LSH(0b0001, 3, PUT[0]);
  LSH(ACC, 3, PUT[0]);
  LSH(ACC, 3, PUT[0]);
  LSH(ACC, 3, PUT[0]);
  NOP;

  LSH(0b0010, 3, PUT[0]);
  LSH(ACC, 3, PUT[0]);
  LSH(ACC, 3, PUT[0]);
  LSH(ACC, 3, PUT[0]);
  NOP;

  LSH(0b0100, 3, PUT[0]);
  LSH(ACC, 3, PUT[0]);
  LSH(ACC, 3, PUT[0]);
  LSH(ACC, 3, PUT[0]);
  NOP;

  LSH(0b1000, 3, PUT[0]);
  LSH(ACC, 3, PUT[0]);
  LSH(ACC, 3, PUT[0]);
  LSH(ACC, 3, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;


  LRL(0b0001, 1, PUT[0]);
  LRL(ACC, 1, PUT[0]);
  LRL(ACC, 1, PUT[0]);
  LRL(ACC, 1, PUT[0]);
  NOP;

  LRL(0b0010, 1, PUT[0]);
  LRL(ACC, 1, PUT[0]);
  LRL(ACC, 1, PUT[0]);
  LRL(ACC, 1, PUT[0]);
  NOP;

  LRL(0b0100, 1, PUT[0]);
  LRL(ACC, 1, PUT[0]);
  LRL(ACC, 1, PUT[0]);
  LRL(ACC, 1, PUT[0]);
  NOP;

  LRL(0b1000, 1, PUT[0]);
  LRL(ACC, 1, PUT[0]);
  LRL(ACC, 1, PUT[0]);
  LRL(ACC, 1, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;

  LRL(0b0001, 2, PUT[0]);
  LRL(ACC, 2, PUT[0]);
  LRL(ACC, 2, PUT[0]);
  LRL(ACC, 2, PUT[0]);
  NOP;

  LRL(0b0010, 2, PUT[0]);
  LRL(ACC, 2, PUT[0]);
  LRL(ACC, 2, PUT[0]);
  LRL(ACC, 2, PUT[0]);
  NOP;

  LRL(0b0100, 2, PUT[0]);
  LRL(ACC, 2, PUT[0]);
  LRL(ACC, 2, PUT[0]);
  LRL(ACC, 2, PUT[0]);
  NOP;

  LRL(0b1000, 2, PUT[0]);
  LRL(ACC, 2, PUT[0]);
  LRL(ACC, 2, PUT[0]);
  LRL(ACC, 2, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;

  LRL(0b0001, 3, PUT[0]);
  LRL(ACC, 3, PUT[0]);
  LRL(ACC, 3, PUT[0]);
  LRL(ACC, 3, PUT[0]);
  NOP;

  LRL(0b0010, 3, PUT[0]);
  LRL(ACC, 3, PUT[0]);
  LRL(ACC, 3, PUT[0]);
  LRL(ACC, 3, PUT[0]);
  NOP;

  LRL(0b0100, 3, PUT[0]);
  LRL(ACC, 3, PUT[0]);
  LRL(ACC, 3, PUT[0]);
  LRL(ACC, 3, PUT[0]);
  NOP;

  LRL(0b1000, 3, PUT[0]);
  LRL(ACC, 3, PUT[0]);
  LRL(ACC, 3, PUT[0]);
  LRL(ACC, 3, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;


  // Test right shifts and rolls
  RSH(0b1000, 1, PUT[0]);
  RSH(ACC, 1, PUT[0]);
  RSH(ACC, 1, PUT[0]);
  RSH(ACC, 1, PUT[0]);
  NOP;

  RSH(0b0100, 1, PUT[0]);
  RSH(ACC, 1, PUT[0]);
  RSH(ACC, 1, PUT[0]);
  RSH(ACC, 1, PUT[0]);
  NOP;

  RSH(0b0010, 1, PUT[0]);
  RSH(ACC, 1, PUT[0]);
  RSH(ACC, 1, PUT[0]);
  RSH(ACC, 1, PUT[0]);
  NOP;

  RSH(0b0001, 1, PUT[0]);
  RSH(ACC, 1, PUT[0]);
  RSH(ACC, 1, PUT[0]);
  RSH(ACC, 1, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;

  RSH(0b1000, 2, PUT[0]);
  RSH(ACC, 2, PUT[0]);
  RSH(ACC, 2, PUT[0]);
  RSH(ACC, 2, PUT[0]);
  NOP;

  RSH(0b0100, 2, PUT[0]);
  RSH(ACC, 2, PUT[0]);
  RSH(ACC, 2, PUT[0]);
  RSH(ACC, 2, PUT[0]);
  NOP;

  RSH(0b0010, 2, PUT[0]);
  RSH(ACC, 2, PUT[0]);
  RSH(ACC, 2, PUT[0]);
  RSH(ACC, 2, PUT[0]);
  NOP;

  RSH(0b0001, 2, PUT[0]);
  RSH(ACC, 2, PUT[0]);
  RSH(ACC, 2, PUT[0]);
  RSH(ACC, 2, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;

  RSH(0b1000, 3, PUT[0]);
  RSH(ACC, 3, PUT[0]);
  RSH(ACC, 3, PUT[0]);
  RSH(ACC, 3, PUT[0]);
  NOP;

  RSH(0b0100, 3, PUT[0]);
  RSH(ACC, 3, PUT[0]);
  RSH(ACC, 3, PUT[0]);
  RSH(ACC, 3, PUT[0]);
  NOP;

  RSH(0b0010, 3, PUT[0]);
  RSH(ACC, 3, PUT[0]);
  RSH(ACC, 3, PUT[0]);
  RSH(ACC, 3, PUT[0]);
  NOP;

  RSH(0b0001, 3, PUT[0]);
  RSH(ACC, 3, PUT[0]);
  RSH(ACC, 3, PUT[0]);
  RSH(ACC, 3, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;


  RRL(0b1000, 1, PUT[0]);
  RRL(ACC, 1, PUT[0]);
  RRL(ACC, 1, PUT[0]);
  RRL(ACC, 1, PUT[0]);
  NOP;

  RRL(0b0100, 1, PUT[0]);
  RRL(ACC, 1, PUT[0]);
  RRL(ACC, 1, PUT[0]);
  RRL(ACC, 1, PUT[0]);
  NOP;

  RRL(0b0010, 1, PUT[0]);
  RRL(ACC, 1, PUT[0]);
  RRL(ACC, 1, PUT[0]);
  RRL(ACC, 1, PUT[0]);
  NOP;

  RRL(0b0001, 1, PUT[0]);
  RRL(ACC, 1, PUT[0]);
  RRL(ACC, 1, PUT[0]);
  RRL(ACC, 1, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;

  RRL(0b1000, 2, PUT[0]);
  RRL(ACC, 2, PUT[0]);
  RRL(ACC, 2, PUT[0]);
  RRL(ACC, 2, PUT[0]);
  NOP;

  RRL(0b0100, 2, PUT[0]);
  RRL(ACC, 2, PUT[0]);
  RRL(ACC, 2, PUT[0]);
  RRL(ACC, 2, PUT[0]);
  NOP;

  RRL(0b0010, 2, PUT[0]);
  RRL(ACC, 2, PUT[0]);
  RRL(ACC, 2, PUT[0]);
  RRL(ACC, 2, PUT[0]);
  NOP;

  RRL(0b0001, 2, PUT[0]);
  RRL(ACC, 2, PUT[0]);
  RRL(ACC, 2, PUT[0]);
  RRL(ACC, 2, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;

  RRL(0b1000, 3, PUT[0]);
  RRL(ACC, 3, PUT[0]);
  RRL(ACC, 3, PUT[0]);
  RRL(ACC, 3, PUT[0]);
  NOP;

  RRL(0b0100, 3, PUT[0]);
  RRL(ACC, 3, PUT[0]);
  RRL(ACC, 3, PUT[0]);
  RRL(ACC, 3, PUT[0]);
  NOP;

  RRL(0b0010, 3, PUT[0]);
  RRL(ACC, 3, PUT[0]);
  RRL(ACC, 3, PUT[0]);
  RRL(ACC, 3, PUT[0]);
  NOP;

  RRL(0b0001, 3, PUT[0]);
  RRL(ACC, 3, PUT[0]);
  RRL(ACC, 3, PUT[0]);
  RRL(ACC, 3, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;

  // Test NOT
  NOT(0b0000, PUT[0]);
  NOT(ACC, PUT[0]);
  NOP;

  NOT(0b0011, PUT[0]);
  NOT(ACC, PUT[0]);
  NOP;

  NOT(0b1100, PUT[0]);
  NOT(ACC, PUT[0]);
  NOP;

  NOT(0b1111, PUT[0]);
  NOT(ACC, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;


  // Test logic operations
  // Test AND
  AND(0b0000, 0b0000, PUT[0]);
  AND(0b1111, 0b0000, PUT[0]);
  AND(0b0000, 0b1111, PUT[0]);
  AND(0b1111, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  AND(ACC, 0b0000, PUT[0]);
  MOV(0b1111, ACC);
  AND(ACC, 0b0000, PUT[0]);
  MOV(0b0000, ACC);
  AND(ACC, 0b1111, PUT[0]);
  MOV(0b1111, ACC);
  AND(ACC, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  AND(0b0000, ACC, PUT[0]);
  MOV(0b0000, ACC);
  AND(0b1111, ACC, PUT[0]);
  MOV(0b1111, ACC);
  AND(0b0000, ACC, PUT[0]);
  MOV(0b1111, ACC);
  AND(0b1111, ACC, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  AND(ACC, ACC, PUT[0]);
  MOV(0b0000, ACC);
  AND(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  AND(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  AND(ACC, ACC, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;


  // Test NAND
  NAND(0b0000, 0b0000, PUT[0]);
  NAND(0b1111, 0b0000, PUT[0]);
  NAND(0b0000, 0b1111, PUT[0]);
  NAND(0b1111, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  NAND(ACC, 0b0000, PUT[0]);
  MOV(0b1111, ACC);
  NAND(ACC, 0b0000, PUT[0]);
  MOV(0b0000, ACC);
  NAND(ACC, 0b1111, PUT[0]);
  MOV(0b1111, ACC);
  NAND(ACC, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  NAND(0b0000, ACC, PUT[0]);
  MOV(0b0000, ACC);
  NAND(0b1111, ACC, PUT[0]);
  MOV(0b1111, ACC);
  NAND(0b0000, ACC, PUT[0]);
  MOV(0b1111, ACC);
  NAND(0b1111, ACC, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  NAND(ACC, ACC, PUT[0]);
  MOV(0b0000, ACC);
  NAND(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  NAND(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  NAND(ACC, ACC, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;


  // Test OR
  OR(0b0000, 0b0000, PUT[0]);
  OR(0b1111, 0b0000, PUT[0]);
  OR(0b0000, 0b1111, PUT[0]);
  OR(0b1111, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  OR(ACC, 0b0000, PUT[0]);
  MOV(0b1111, ACC);
  OR(ACC, 0b0000, PUT[0]);
  MOV(0b0000, ACC);
  OR(ACC, 0b1111, PUT[0]);
  MOV(0b1111, ACC);
  OR(ACC, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  OR(0b0000, ACC, PUT[0]);
  MOV(0b0000, ACC);
  OR(0b1111, ACC, PUT[0]);
  MOV(0b1111, ACC);
  OR(0b0000, ACC, PUT[0]);
  MOV(0b1111, ACC);
  OR(0b1111, ACC, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  OR(ACC, ACC, PUT[0]);
  MOV(0b0000, ACC);
  OR(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  OR(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  OR(ACC, ACC, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;


  // Test NOR
  NOR(0b0000, 0b0000, PUT[0]);
  NOR(0b1111, 0b0000, PUT[0]);
  NOR(0b0000, 0b1111, PUT[0]);
  NOR(0b1111, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  NOR(ACC, 0b0000, PUT[0]);
  MOV(0b1111, ACC);
  NOR(ACC, 0b0000, PUT[0]);
  MOV(0b0000, ACC);
  NOR(ACC, 0b1111, PUT[0]);
  MOV(0b1111, ACC);
  NOR(ACC, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  NOR(0b0000, ACC, PUT[0]);
  MOV(0b0000, ACC);
  NOR(0b1111, ACC, PUT[0]);
  MOV(0b1111, ACC);
  NOR(0b0000, ACC, PUT[0]);
  MOV(0b1111, ACC);
  NOR(0b1111, ACC, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  NOR(ACC, ACC, PUT[0]);
  MOV(0b0000, ACC);
  NOR(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  NOR(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  NOR(ACC, ACC, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;


  // Test XOR
  XOR(0b0000, 0b0000, PUT[0]);
  XOR(0b1111, 0b0000, PUT[0]);
  XOR(0b0000, 0b1111, PUT[0]);
  XOR(0b1111, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  XOR(ACC, 0b0000, PUT[0]);
  MOV(0b1111, ACC);
  XOR(ACC, 0b0000, PUT[0]);
  MOV(0b0000, ACC);
  XOR(ACC, 0b1111, PUT[0]);
  MOV(0b1111, ACC);
  XOR(ACC, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  XOR(0b0000, ACC, PUT[0]);
  MOV(0b0000, ACC);
  XOR(0b1111, ACC, PUT[0]);
  MOV(0b1111, ACC);
  XOR(0b0000, ACC, PUT[0]);
  MOV(0b1111, ACC);
  XOR(0b1111, ACC, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  XOR(ACC, ACC, PUT[0]);
  MOV(0b0000, ACC);
  XOR(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  XOR(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  XOR(ACC, ACC, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;


  // Test XNOR
  XNOR(0b0000, 0b0000, PUT[0]);
  XNOR(0b1111, 0b0000, PUT[0]);
  XNOR(0b0000, 0b1111, PUT[0]);
  XNOR(0b1111, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  XNOR(ACC, 0b0000, PUT[0]);
  MOV(0b1111, ACC);
  XNOR(ACC, 0b0000, PUT[0]);
  MOV(0b0000, ACC);
  XNOR(ACC, 0b1111, PUT[0]);
  MOV(0b1111, ACC);
  XNOR(ACC, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  XNOR(0b0000, ACC, PUT[0]);
  MOV(0b0000, ACC);
  XNOR(0b1111, ACC, PUT[0]);
  MOV(0b1111, ACC);
  XNOR(0b0000, ACC, PUT[0]);
  MOV(0b1111, ACC);
  XNOR(0b1111, ACC, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  XNOR(ACC, ACC, PUT[0]);
  MOV(0b0000, ACC);
  XNOR(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  XNOR(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  XNOR(ACC, ACC, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;


  // Test Arithmetic Operations
  // Test ADD
  ADD(0b0000, 0b0000, PUT[0]);
  ADD(0b0001, 0b0001, PUT[0]);
  ADD(0b0110, 0b1001, PUT[0]);
  ADD(0b1111, 0b0001, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  ADD(ACC, 0b0000, PUT[0]);
  MOV(0b0001, ACC);
  ADD(ACC, 0b0001, PUT[0]);
  MOV(0b0110, ACC);
  ADD(ACC, 0b1001, PUT[0]);
  MOV(0b1111, ACC);
  ADD(ACC, 0b0001, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  ADD(0b0000, ACC, PUT[0]);
  MOV(0b0001, ACC);
  ADD(0b0001, ACC, PUT[0]);
  MOV(0b1001, ACC);
  ADD(0b0110, ACC, PUT[0]);
  MOV(0b0001, ACC);
  ADD(0b1111, ACC, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  ADD(ACC, ACC, PUT[0]);
  MOV(0b0001, ACC);
  ADD(ACC, ACC, PUT[0]);
  MOV(0b0110, ACC);
  ADD(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  ADD(ACC, ACC, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;


  // Test SUB
  SUB(0b0010, 0b0000, PUT[0]);
  SUB(0b0001, 0b0001, PUT[0]);
  SUB(0b0001, 0b0010, PUT[0]);
  SUB(0b1111, 0b1111, PUT[0]);
  NOP;

  MOV(0b0010, ACC);
  SUB(ACC, 0b0000, PUT[0]);
  MOV(0b0001, ACC);
  SUB(ACC, 0b0001, PUT[0]);
  MOV(0b0001, ACC);
  SUB(ACC, 0b0010, PUT[0]);
  MOV(0b1111, ACC);
  SUB(ACC, 0b1111, PUT[0]);
  NOP;

  MOV(0b0000, ACC);
  SUB(0b0010, ACC, PUT[0]);
  MOV(0b0001, ACC);
  SUB(0b0001, ACC, PUT[0]);
  MOV(0b0010, ACC);
  SUB(0b0001, ACC, PUT[0]);
  MOV(0b1111, ACC);
  SUB(0b1111, ACC, PUT[0]);
  NOP;

  MOV(0b0010, ACC);
  SUB(ACC, ACC, PUT[0]);
  MOV(0b0001, ACC);
  SUB(ACC, ACC, PUT[0]);
  MOV(0b0001, ACC);
  SUB(ACC, ACC, PUT[0]);
  MOV(0b1111, ACC);
  SUB(ACC, ACC, PUT[0]);
  NOP;

  NOP; NOP; NOP; NOP;

}
