{
  MOV (GET[0], REG[0x0]);
  MOV (GET[0], REG[0x1]);
  MOV (GET[0], REG[0x2]);
  MOV (GET[0], REG[0x3]);
  MOV (GET[0], REG[0x4]);
  MOV (GET[0], REG[0x5]);
  MOV (GET[0], REG[0x6]);
  MOV (GET[0], REG[0x7]);
  MOV (GET[0], REG[0x8]);
  MOV (GET[0], REG[0x9]);
  MOV (GET[0], REG[0xA]);
  MOV (GET[0], REG[0xB]);
  MOV (GET[0], REG[0xC]);
  MOV (GET[0], REG[0xD]);
  MOV (GET[0], REG[0xE]);
  MOV (GET[0], REG[0xF]);

  MOV (REG[0x0], PUT[0]);
  MOV (REG[0x1], PUT[0]);
  MOV (REG[0x2], PUT[0]);
  MOV (REG[0x3], PUT[0]);
  MOV (REG[0x4], PUT[0]);
  MOV (REG[0x5], PUT[0]);
  MOV (REG[0x6], PUT[0]);
  MOV (REG[0x7], PUT[0]);
  MOV (REG[0x8], PUT[0]);
  MOV (REG[0x9], PUT[0]);
  MOV (REG[0xA], PUT[0]);
  MOV (REG[0xB], PUT[0]);
  MOV (REG[0xC], PUT[0]);
  MOV (REG[0xD], PUT[0]);
  MOV (REG[0xE], PUT[0]);
  MOV (REG[0xF], PUT[0]);

  JMP(test_jump);
  NOP;
  NOP;
  NOP;
  NOP;
  NOP;
  NOP;
  NOP;
  test_jump:


  NOT (REG[0], PUT[0]);
  NOT (REG[1], PUT[0]);
  NOT (REG[2], PUT[0]);
  NOT (REG[3], PUT[0]);

  NOT (GET[0], PUT[0]);
  NOT (GET[0], PUT[0]);
  NOT (GET[0], PUT[0]);
  NOT (GET[0], PUT[0]);

  AND  (REG[0], GET[0], PUT[0]);
  AND  (REG[1], GET[0], PUT[0]);
  NAND (REG[2], GET[0], PUT[0]);
  NAND (REG[3], GET[0], PUT[0]);

  OR  (REG[0], REG[4], PUT[0]);
  OR  (REG[1], REG[5], PUT[0]);
  NOR (REG[2], REG[6], PUT[0]);
  NOR (REG[3], REG[7], PUT[0]);

  XOR  (REG[ 8], REG[12], PUT[0]);
  XOR  (REG[ 9], REG[13], PUT[0]);
  XNOR (REG[10], REG[14], PUT[0]);
  XNOR (REG[11], REG[15], PUT[0]);
}
